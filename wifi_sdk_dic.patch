diff --git a/components/si91x/platforms/siwx917_soc/siwx917_soc_ncp_host.c b/components/si91x/platforms/siwx917_soc/siwx917_soc_ncp_host.c
index c72afd2..0ed9863 100644
--- a/components/si91x/platforms/siwx917_soc/siwx917_soc_ncp_host.c
+++ b/components/si91x/platforms/siwx917_soc/siwx917_soc_ncp_host.c
@@ -94,7 +94,7 @@ sl_status_t sl_si91x_host_init(void)
       .name       = "si91x_bus",
       .priority   = osPriorityRealtime,
       .stack_mem  = 0,
-      .stack_size = 768,
+      .stack_size = 2048,
       .cb_mem     = 0,
       .cb_size    = 0,
       .attr_bits  = 0u,
@@ -108,7 +108,7 @@ sl_status_t sl_si91x_host_init(void)
       .name       = "si91x_event",
       .priority   = osPriorityNormal,
       .stack_mem  = 0,
-      .stack_size = 768,
+      .stack_size = 1736,
       .cb_mem     = 0,
       .cb_size    = 0,
       .attr_bits  = 0u,
diff --git a/components/si91x/src/sl_si91x_driver.c b/components/si91x/src/sl_si91x_driver.c
index 5b83949..71266e3 100644
--- a/components/si91x/src/sl_si91x_driver.c
+++ b/components/si91x/src/sl_si91x_driver.c
@@ -39,6 +39,7 @@
 #include "cmsis_os2.h"
 #include <stdint.h>
 #include <string.h>
+
 #ifdef RSI_M4_INTERFACE
 #include "rsi_rom_clks.h"
 #include "rsi_m4.h"
@@ -833,7 +834,7 @@ sl_status_t sl_si91x_driver_send_data_packet(sl_si91x_queue_type_t queue_type,
   sl_status_t return_status;
   sl_wifi_buffer_t *packet;
   sl_si91x_driver_context_t context = { 0 };
-
+  printf("sl_si91x_driver_send_data_packet fn\n");
   return_status = sl_si91x_allocate_command_buffer(&packet,
                                                    (void **)&node,
                                                    sizeof(sl_si91x_queue_packet_t),
@@ -848,18 +849,23 @@ sl_status_t sl_si91x_driver_send_data_packet(sl_si91x_queue_type_t queue_type,
   if (command == RSI_BOOTUP_PARAMS)
     host_desc[14] = RSI_SOC_FREQ;
 #endif
-
+  if(node == NULL){
+    printf("----Node is NULL-----\n");
+    return SL_STATUS_FAIL;
+  }
   node->host_packet       = buffer;
   node->firmware_queue_id = RSI_WLAN_DATA_Q;
   node->command_type      = (sl_si91x_command_type_t)queue_type;
   node->sdk_context       = NULL;
   node->flags             = SI91X_PACKET_WITH_NO_RESPONSE;
-
+  printf("-----After Node check---\n");
   context.packet  = node;
   context.payload = &(packet_id[queue_type]);
+  printf("-----before sl_si91x_host_add_to_queue_with_atomic_action fn----\n");
   sl_si91x_host_add_to_queue_with_atomic_action(queue_type, packet, &context, sl_si91x_atomic_packet_id_allocator);
+  printf("-----before sl_si91x_host_set_event fn-----\n");
   sl_si91x_host_set_event(NCP_HOST_DATA_TX_EVENT);
-
+  printf("----after sl_si91x_host_set_event fn-----\n");
   return SL_STATUS_OK;
 }
 
diff --git a/components/si91x/threading/sli_si91x_multithreaded.c b/components/si91x/threading/sli_si91x_multithreaded.c
index be9a349..bbbc5e7 100644
--- a/components/si91x/threading/sli_si91x_multithreaded.c
+++ b/components/si91x/threading/sli_si91x_multithreaded.c
@@ -180,11 +180,13 @@ void si91x_bus_thread(void *args)
 #else
     if (0 == tx_queues_empty) {
 #endif
+      // osDelay(200);
       event = si91x_host_wait_for_event((NCP_HOST_DATA_TX_EVENT | NCP_HOST_BUS_RX_EVENT), osWaitForever);
     }
 
     // Wake device, if needed
     if ((current_performance_profile != HIGH_PERFORMANCE)) {
+      printf("after set event NCP_HOST_DATA_TX_EVENT\n");
       if (si91x_req_wakeup() != SL_STATUS_OK) {
         // TBD: VERY IMPORTANT: Need to restore Rx event if it was set: if(event & NCP_HOST_BUS_RX_EVENT) then restore Rx event
         if ((event & NCP_HOST_DATA_TX_EVENT) || (tx_queues_empty != 0))
@@ -226,7 +228,7 @@ void si91x_bus_thread(void *args)
       frame_type   = data[2] + (data[3] << 8);
       frame_status = data[12] + (data[13] << 8);
 
-      SL_DEBUG_LOG("><<<< Rx -> queueId : %u, frameId : 0x%x, frameStatus: 0x%x, length : %u\n",
+      printf("><<<< Rx -> queueId : %u, frameId : 0x%x, frameStatus: 0x%x, length : %u\n",
                    queue_id,
                    frame_type,
                    frame_status,
@@ -666,6 +668,9 @@ void si91x_bus_thread(void *args)
             sl_si91x_host_add_to_queue(SI91X_SOCKET_RESPONSE_QUEUE, packet);
             sl_si91x_host_set_event(NCP_HOST_SOCKET_RESPONSE_EVENT);
 #else
+            SL_DEBUG_LOG("Raw Data\n");
+            ++command_trace[SI91X_SOCKET_CMD].rx_counter;
+              command_trace[SI91X_SOCKET_CMD].command_in_flight = false;
             sl_si91x_host_process_data_frame(SL_WIFI_CLIENT_INTERFACE, buffer);
             sl_si91x_host_free_buffer(buffer, SL_WIFI_RX_FRAME_BUFFER);
 #endif
@@ -695,6 +700,7 @@ void si91x_bus_thread(void *args)
     }
 process_data_tx_event:
     if ((0 == (interrupt_status & RSI_BUFFER_FULL)) && (false == global_queue_block)) {
+      // printf("process_data_tx_event\n");
       queue_mask = 1;
 
       for (i = 0; i < SI91X_CMD_MAX; i++) {
@@ -717,14 +723,16 @@ static sl_status_t bus_write_frame(sl_si91x_queue_type_t queue_type,
   sl_wifi_buffer_t *buffer;
   sl_si91x_packet_t *packet;
   sl_si91x_queue_packet_t *node = NULL;
-
+  printf("bus_write_frame fn\n");
   if (true == trace->sequential) {
     if (true == trace->command_in_flight) {
+      printf("bus_write_frame before SL_STATUS_BUSY return");
       return SL_STATUS_BUSY;
     }
   }
 
   if (current_performance_profile != HIGH_PERFORMANCE) {
+    printf("bus_write_frame fn si91x_req_wakeup before\n");
     if (si91x_req_wakeup() != SL_STATUS_OK) {
       return SL_STATUS_TIMEOUT;
     }
@@ -753,6 +761,7 @@ static sl_status_t bus_write_frame(sl_si91x_queue_type_t queue_type,
   trace->sdk_context       = node->sdk_context;
 
   status = sl_si91x_bus_write_frame(packet, packet->data, length);
+  printf("-----status = %d----\n",status);
 #ifdef RSI_M4_INTERFACE
   if (packet->desc[2] == RSI_COMMON_REQ_SOFT_RESET) {
     sli_config_m4_dma_desc_on_reset();
@@ -762,7 +771,7 @@ static sl_status_t bus_write_frame(sl_si91x_queue_type_t queue_type,
     // TBD : Power save Request expecting small delay while switching between Any power save mode to HIGH_PERFORMANCE and vise-versa. Maybe a small delay is required for configuring the power save parameter in the firmware.
     osDelay(3);
   }
-  SL_DEBUG_LOG("<>>>> Tx -> queueId : %u, frameId : 0x%x, length : %u\n", packet->desc[1], trace->frame_type, length);
+  printf("<>>>> Tx -> queueId : %u, frameId : 0x%x, length : %u\n", packet->desc[1], trace->frame_type, length);
 
   if (status != SL_STATUS_OK) {
     SL_DEBUG_LOG("\r\n BUS_WRITE_ERROR \r\n");
@@ -778,10 +787,10 @@ static sl_status_t bus_write_frame(sl_si91x_queue_type_t queue_type,
     rsi_bt_common_tx_done((sl_si91x_packet_t *)(node->host_packet));
   }
 #endif
-
+  printf("sl_si91x_host_free_buffer before\n");
   sl_si91x_host_free_buffer(node->host_packet, buffer_type);
   sl_si91x_host_free_buffer(buffer, buffer_type);
-
+  printf("sl_si91x_host_free_buffer after\n");
   trace->tx_counter++;
   return SL_STATUS_OK;
 }
diff --git a/components/siwx917_soc/sl_uart.c b/components/siwx917_soc/sl_uart.c
index 76cd9f2..9cee77a 100644
--- a/components/siwx917_soc/sl_uart.c
+++ b/components/siwx917_soc/sl_uart.c
@@ -208,7 +208,7 @@ char _getchar(void)
   return ch;
 }
 
-long _write(int file, const char *buffer, unsigned long size)
+long _write_(int file, const char *buffer, unsigned long size)
 {
   UNUSED_PARAMETER(file);
   if (uart_initialised == false) {
